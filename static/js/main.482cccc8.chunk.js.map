{"version":3,"sources":["components/Card.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","useState","isSelected","setSelect","handleSelect","isHover","setHover","className","disabled","onClick","onMouseOut","onMouseOver","header","title","taste","description","weight","weightMeasure","disabledText","footerDisabled","start","end","footerSelected","footer","footerLink","renderFooter","App","CONTENT","data","map","card","staticData","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"s0EAyDeA,EAvDF,SAAAC,GAAU,IAAD,EACcC,oBAAS,GADvB,mBACXC,EADW,KACCC,EADD,KAEZC,EAAe,kBAAMD,GAAWD,IAFpB,EAGUD,oBAAS,GAHnB,mBAGXI,EAHW,KAGFC,EAHE,KAmBlB,OACI,yBAAKC,UAHC,WAAN,OAAkBL,EAAa,WAAa,GAA5C,YAAkDG,EAAU,eAAiB,IAA7E,YAAoFL,EAAMQ,SAAW,WAAa,IAGlFC,QAASL,EAAcM,WAhBpC,kBAAOV,EAAMQ,UAAYF,GAAUD,IAgB6BM,YAf/D,kBAAOX,EAAMQ,UAAYH,GAAWC,GAAUD,KAgB9D,yBAAKE,UAAU,eACX,yBAAKA,UAAU,QACX,6BACI,uBAAGA,UAAU,gBACRP,EAAMY,QAEX,wBAAIL,UAAU,eACTP,EAAMa,MACP,8BAAOb,EAAMc,QAEjB,uBAAGP,UAAU,qBACRP,EAAMe,cAGf,yBAAKR,UAAU,gBACX,2BACKP,EAAMgB,QAEX,2BACKhB,EAAMiB,kBAMvB,yBAAKV,UAAU,eAAeE,QAASL,GAxC1B,WACjB,IAAMc,EAAelB,EAAMmB,eAAeC,MAAQpB,EAAMc,MAAQd,EAAMmB,eAAeE,IACrF,OAAO,oCAECrB,EAAMQ,SAAWU,EACbhB,EAAaF,EAAMsB,eACf,CAACtB,EAAMuB,OAAQ,4BAAQhB,UAAU,cAAcP,EAAMwB,cAmC5DC,M,OC1BFC,MAlBf,WACE,OACE,yBAAKnB,UAAU,OACb,kKAGA,yBAAKA,UAAU,WACZoB,EAAQC,KAAKC,KAAI,SAAAC,GAAI,OACpB,kBAAC,EAAD,iBACMA,EACAH,EAAQI,mBCHJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.482cccc8.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst Card = props => {\r\n    const [isSelected, setSelect] = useState(false);\r\n    const handleSelect = () => setSelect(!isSelected);\r\n    const [isHover, setHover] = useState(false);\r\n    const handleMouseOut = () => !props.disabled && setHover(!isHover);\r\n    const handleMouseOver = () => !props.disabled && isHover && setHover(!isHover);\r\n    const renderFooter = () => {\r\n        const disabledText = props.footerDisabled.start + props.taste + props.footerDisabled.end;\r\n        return <>\r\n            {\r\n                props.disabled ? disabledText :\r\n                    isSelected ? props.footerSelected :\r\n                        [props.footer, <button className=\"card__link\">{props.footerLink}</button>]\r\n            }\r\n        </>\r\n    }\r\n    const wrapperClass = () => {\r\n        return `wrapper ${isSelected ? 'selected' : ''} ${isHover ? 'defaultHover' : ' '} ${props.disabled ? 'disabled' : ''}`\r\n    }\r\n    return (\r\n        <div className={wrapperClass()} onClick={handleSelect} onMouseOut={handleMouseOut} onMouseOver={handleMouseOver}>\r\n            <div className=\"card-border\">\r\n                <div className=\"card\">\r\n                    <div>\r\n                        <p className=\"card__header\">\r\n                            {props.header}\r\n                        </p>\r\n                        <h2 className=\"card__title\">\r\n                            {props.title}\r\n                            <span>{props.taste}</span>\r\n                        </h2>\r\n                        <p className=\"card__description\">\r\n                            {props.description}\r\n                        </p>\r\n                    </div>\r\n                    <div className=\"card__weight\">\r\n                        <p>\r\n                            {props.weight}\r\n                        </p>\r\n                        <p>\r\n                            {props.weightMeasure}\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"card__footer\" onClick={handleSelect}>\r\n                {renderFooter()}\r\n            </div>\r\n        </div >\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport './style/main.scss';\r\nimport Card from \"./components/Card\";\r\nimport CONTENT from \"./data.json\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>\r\n        Ты сегодня покормил кота?\r\n      </h1>\r\n      <div className=\"content\">\r\n        {CONTENT.data.map(card => (\r\n          <Card\r\n            {...card}\r\n            {...CONTENT.staticData}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}